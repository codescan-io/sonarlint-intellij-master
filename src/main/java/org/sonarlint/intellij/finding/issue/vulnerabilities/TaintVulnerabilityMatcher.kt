/*
 * Codescan for IntelliJ IDEA
 * Copyright (C) 2015-2023 SonarSource
 * sonarlint@sonarsource.com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 */
package org.sonarlint.intellij.finding.issue.vulnerabilities

import com.intellij.openapi.project.Project
import com.intellij.openapi.roots.ProjectRootManager
import com.intellij.openapi.vfs.VirtualFile
import com.intellij.psi.PsiManager
import org.sonarlint.intellij.finding.*
import org.sonarlint.intellij.finding.TextRangeMatcher.NoMatchException
import org.sonarsource.sonarlint.core.commons.TextRangeWithHash
import org.sonarsource.sonarlint.core.serverconnection.issues.ServerTaintIssue

class TaintVulnerabilityMatcher(private val project: Project) {
  private val textRangeMatcher = TextRangeMatcher(project)

  fun match(remoteIssue: ServerTaintIssue): LocalTaintVulnerability {
      val primaryLocation = matchLocation(remoteIssue)

      return LocalTaintVulnerability(
        primaryLocation.file?.let { PsiManager.getInstance(project).findFile(it) },
        primaryLocation,
        remoteIssue.flows.map { f -> Flow(f.locations().reversed().map { matchLocation(it) }) },
        remoteIssue)
  }

  private fun matchLocation(taintIssue: ServerTaintIssue): Location {
    return matchLocation(taintIssue.filePath!!, taintIssue.textRange, taintIssue.message)
  }

  private fun matchLocation(location: ServerTaintIssue.ServerIssueLocation): Location {
    return matchLocation(location.filePath!!, location.textRange, location.message)
  }

  private fun matchLocation(filePath: String, textRange : TextRangeWithHash?, message: String): Location {
    for (contentRoot in ProjectRootManager.getInstance(project).contentRoots) {
      if (contentRoot.isDirectory) {
        val matchedFile = contentRoot.findFileByRelativePath(filePath)
        if (matchedFile != null) {
          return matchTextRange(matchedFile, textRange, message)
        }
      } else {
        // On Rider, all source files are returned as individual content roots, so simply check for equality
        if (contentRoot.path.endsWith(filePath)) {
          return matchTextRange(contentRoot, textRange, message)
        }
      }
    }
    return unknownLocation(message, filePath)
  }

  private fun matchTextRange(matchedFile: VirtualFile, textRange : TextRangeWithHash?, message: String): Location {
    if (textRange == null) {
      return fileOnlyLocation(matchedFile, message)
    }
    return try {
      val rangeMarker = textRangeMatcher.match(matchedFile, textRange)
      resolvedLocation(matchedFile, rangeMarker, message, textRange.hash)
    } catch (e: NoMatchException) {
      fileOnlyLocation(matchedFile, message)
    }
  }
}
