/*
 * CodeScan for IntelliJ IDEA
 * Copyright (C) 2015-2023 SonarSource
 * sonarlint@sonarsource.com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 */
package org.sonarlint.intellij.finding.issue.vulnerabilities

import com.intellij.psi.PsiFile
import org.sonarlint.intellij.finding.Flow
import org.sonarlint.intellij.finding.Issue
import org.sonarlint.intellij.finding.Location
import org.sonarlint.intellij.finding.issue.LiveIssue
import org.sonarsource.sonarlint.core.commons.CleanCodeAttribute
import org.sonarsource.sonarlint.core.commons.ImpactSeverity
import org.sonarsource.sonarlint.core.commons.IssueSeverity
import org.sonarsource.sonarlint.core.commons.RuleType
import org.sonarsource.sonarlint.core.commons.SoftwareQuality
import org.sonarsource.sonarlint.core.serverconnection.issues.ServerTaintIssue
import java.time.Instant

class LocalTaintVulnerability(private val primaryLocationPsiFile: PsiFile?, private val primaryLocation: Location, val flows: List<Flow>, private val remoteTaintVulnerability: ServerTaintIssue): Issue {

  private var resolved: Boolean = false
  fun rangeMarker() = primaryLocation.range
  override fun file() = primaryLocation.file
  fun key(): String = remoteTaintVulnerability.key
  fun message(): String = remoteTaintVulnerability.message ?: ""
  fun creationDate(): Instant = remoteTaintVulnerability.creationDate
  fun severity(): IssueSeverity = remoteTaintVulnerability.severity
  override fun getId() = null
  override fun resolve() {
    resolved = true
  }

  override fun getCleanCodeAttribute(): CleanCodeAttribute? = remoteTaintVulnerability.cleanCodeAttribute.orElse(null)
  override fun getImpacts(): Map<SoftwareQuality, ImpactSeverity> = remoteTaintVulnerability.impacts

  fun isResolved() = resolved
  override fun getServerKey() = key()
  override fun getRuleKey(): String = remoteTaintVulnerability.ruleKey
  override fun getType(): RuleType = remoteTaintVulnerability.type
  override fun isValid() = file()?.isValid == true && rangeMarker()?.isValid == true
  fun getValidTextRange() = LiveIssue.toValidTextRange(primaryLocationPsiFile, rangeMarker())
  override fun getRuleDescriptionContextKey() = remoteTaintVulnerability.ruleDescriptionContextKey

}
